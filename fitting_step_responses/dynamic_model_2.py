"""Ми застосуємо моделі першого замовлення плюс мертвий час і
другого замовлення плюс мертвий час. Бібліотека tbcontrol.responses
містить аналітичні формули для цих покрокових відповідей."""
import scipy.optimize
from tbcontrol.responses import fopdt, sopdt
# Функції fopdt і sopdt є частинами пакета tbcontrol.responses
# і використовуються для моделювання відповіді систем на різні
# типи передавальних функцій.
# fopdt: Ця функція моделює першого порядку з запізненням
# (First-Order Plus Dead Time, FOPDT) передавальну функцію.
# Вона приймає наступні аргументи:
# t: масив значень часу.
# K: коефіцієнт передачі.
# tau: часова константа запізнення.
# theta: часова константа запізнення.
# y0: початкове значення відповіді.
# Функція fopdt обчислює відповідь системи на вхідний сигнал у
# вказаний момент часу t за допомогою формули FOPDT і повертає
# відповідний масив значень вихідного сигналу.
# sopdt: Ця функція моделює другого порядку з запізненням
# (Second-Order Plus Dead Time, SOPDT) передавальну функцію.
# Вона приймає наступні аргументи:
# t: масив значень часу.
# K: коефіцієнт передачі.
# tau: часова константа запізнення.
# zeta: коефіцієнт затухання.
# theta: часова константа запізнення.
# y0: початкове значення відповіді.
# Функція sopdt обчислює відповідь системи на вхідний сигнал
# у вказаний момент часу t за допомогою формули SOPDT і повертає
# відповідний масив значень вихідного сигналу.
# Ці функції корисні для моделювання і аналізу систем керування
# та дозволяють отримати передавальну функцію системи з використанням виміряних даних.
from ipywidgets import interact
# Функція interact з пакета ipywidgets є інтерактивним інструментом
# для створення взаємодіючих елементів у користувацькому інтерфейсі.
# Вона дозволяє створювати віджети, які можна використовувати для
# вибору або налаштування параметрів функцій та миттєвого оновлення
# відображення результатів.
# Функція interact має наступний синтаксис: interact(function, **kwargs)
# function: Функція, яка буде викликатися при зміні параметрів віджетів.
# **kwargs: Параметри, які будуть використовуватися для створення віджетів.
# Функція interact автоматично створює віджети, відповідні до переданих параметрів,
# і відображає їх у користувацькому інтерфейсі. При зміні значень віджетів
# викликається функція function, і результати оновлюються на основі нових
# значень параметрів.
#
# Наприклад, у вашому коді функція interact використовується для створення
# взаємодіючого інтерфейсу, де ви можете вибирати параметри K, tau, theta,
# y0 і відразу бачити результати модельованої відповіді на графіку.
# При зміні значень віджетів, викликається функція resultplot,
# яка відповідає за побудову графіку з оновленими значеннями параметрів.
import matplotlib.pyplot as plt
from dynamic_model_1 import ts, ym, ys

def resultplot(K, tau, theta, y0):
    plt.scatter(ts, ym)
    plt.plot(ts, fopdt(ts, K, tau, theta, y0), color='red')
    plt.show()

interact(resultplot,
         K=(1., 10.),
         tau=(0., 10.),
         theta=(0., 10.),
         y0=(0., 20.))

[K, tau, theta, y0], _ = scipy.optimize.curve_fit(fopdt, ts, ym, [2, 4, 1, 10])
print([K, tau, theta, y0])

[K_2, tau_2, zeta_2, theta_2, y0_2], _ = scipy.optimize.curve_fit(sopdt, ts, ym, [2, 2, 1.5, 1, 10])
print([K_2, tau_2, zeta_2, theta_2, y0_2])

plt.figure(figsize=(10, 5))
plt.scatter(ts, ym, label='Data')
plt.plot(ts, fopdt(ts, K, tau, theta, y0), color='red', label='FOPDT fit')
plt.plot(ts, sopdt(ts, K_2, tau_2, zeta_2, theta_2, y0_2), color='green', label='SOPDT fit')
plt.plot(ts, ys + 10, color='blue', label='Original')
plt.legend(loc='best')


if __name__ == "__main__":
    plt.show()
